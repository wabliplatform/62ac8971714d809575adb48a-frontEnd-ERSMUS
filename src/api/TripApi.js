/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Trip from '../model/Trip';

/**
* Trip service.
* @module api/TripApi
* @version 1.0.0
*/
export default class TripApi {

    /**
    * Constructs a new TripApi. 
    * @alias module:api/TripApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createtrip operation.
     * @callback module:api/TripApi~createtripCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Trip} trip data to be created
     * @param {module:api/TripApi~createtripCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trip}
     */
    createtrip(trip, callback) {
      let postBody = trip;
      // verify the required parameter 'trip' is set
      if (trip === undefined || trip === null) {
        throw new Error("Missing the required parameter 'trip' when calling createtrip");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Trip;
      return this.apiClient.callApi(
        '/trip', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletetrip operation.
     * @callback module:api/TripApi~deletetripCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} tripId the Id parameter
     * @param {module:api/TripApi~deletetripCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletetrip(tripId, callback) {
      let postBody = null;
      // verify the required parameter 'tripId' is set
      if (tripId === undefined || tripId === null) {
        throw new Error("Missing the required parameter 'tripId' when calling deletetrip");
      }

      let pathParams = {
        'tripId': tripId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/trip/{tripId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlltrip operation.
     * @callback module:api/TripApi~getAlltripCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Trip>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/TripApi~getAlltripCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Trip>}
     */
    getAlltrip(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Trip];
      return this.apiClient.callApi(
        '/trip/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gettrip operation.
     * @callback module:api/TripApi~gettripCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} tripId the Id parameter
     * @param {module:api/TripApi~gettripCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trip}
     */
    gettrip(tripId, callback) {
      let postBody = null;
      // verify the required parameter 'tripId' is set
      if (tripId === undefined || tripId === null) {
        throw new Error("Missing the required parameter 'tripId' when calling gettrip");
      }

      let pathParams = {
        'tripId': tripId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Trip;
      return this.apiClient.callApi(
        '/trip/{tripId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatetrip operation.
     * @callback module:api/TripApi~updatetripCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} tripId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Trip} opts.trip data to be updated
     * @param {module:api/TripApi~updatetripCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trip}
     */
    updatetrip(tripId, opts, callback) {
      opts = opts || {};
      let postBody = opts['trip'];
      // verify the required parameter 'tripId' is set
      if (tripId === undefined || tripId === null) {
        throw new Error("Missing the required parameter 'tripId' when calling updatetrip");
      }

      let pathParams = {
        'tripId': tripId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Trip;
      return this.apiClient.callApi(
        '/trip/{tripId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
